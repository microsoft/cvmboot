#!/bin/sh

# ATTN: preserve the following tag because cvmdisk checks for it:
# __resource_disk__

PREREQ=''

prereqs() {
  echo "$PREREQ"
}

case $1 in
prereqs)
  prereqs
  exit 0
  ;;
esac

script="root_ro script:"

# dev-mapper names:
# CAUTION: ${rootfs_ro} must match the same definition in verity.script
#rootfs_ro=rootfs_ro
#rootfs_rw=rootfs_rw
#rootfs=rootfs
rootfs_ro=rootfs_verity
rootfs_rw=rootfs_crypt
rootfs=rootfs_snapshot

##==============================================================================
##
## cvmboot_panic(message)
##
##==============================================================================
cvmboot_panic()
{
    local message=$1
    echo "cvmboot_panic: ${message}"
    read
}

##==============================================================================
##
## create_rootfs_rw()
##
## Use dm-crypt to create the upper writable rootfs layer from the last
## partition.
##
## Resulting topology:
##
##     [ /dev/mapper/${rootfs_rw} ]
##     [ dm-crypt driver          ]
##     [ /dev/sda?                ]
##
##==============================================================================
create_rootfs_rw()
{
    local disk="/dev/sdb"
    local partition="${disk}1"

    # ATTN: check for whether it is has ephemeral readme

    #fdisk -l "${disk}"
    #read
    #echo "<<<<<<<< PRESS ANY KEY TO CONTINUE >>>>>>>>"

    # Fail if the resource disk does not exist
    if [ ! -b "${disk}" ]; then
        cvmboot_panic "${script}: disk not found: ${disk}"
    fi

    # Remove partition if it exists
    if [ -b "${partition}" ]; then
        # Mount the resource disk partition:
        #mount.ntfs "${partition}" "${mountpoint}"
        #"$?" || cvmboot_panic "${script}: failed to mount: ${partition}"
        #
        #if [ ! -f "${mountpoint}/DATALOSS_WARNING_README.txt" ]; then
        #    cvmboot_panic "${script}: not a resource disk partition: ${partition}"
        #fi
        #
        #umount "${mountpoint}"
        #"$?" && cvmboot_panic "${script}: failed to unmount: ${partition}"

        parted -s "${disk}" rm 1
        if  [ "$?" != "0" ]; then
            cvmboot_panic "${script}: failed to remove partition: ${partition}"
        fi
    fi

    # Remove second partition if any
    if [ -b "${partition}" ]; then
        parted -s "${disk}" rm 1
        if  [ "$?" != "0" ]; then
            cvmboot_panic "${script}: failed to remove partition: ${partition}"
        fi
    fi

    # Create first NTFS partition
    parted -s "${disk}" mkpart primary ntfs "0%" "10%"
    if  [ "$?" != "0" ]; then
        cvmboot_panic "${script}: failed to create NTFS partition: ${disk}"
    fi

    # Create second NTFS partition
    parted -s "${disk}" mkpart primary ntfs "10%" "100%"
    if  [ "$?" != "0" ]; then
        cvmboot_panic "${script}: failed to create NTFS partition: ${disk}"
    fi

    # Determine the sector size of the second partition
    local sectsize=$(fdisk -l "${disk}" | grep "Units:" | awk '{print $8}')
    if  [ "$?" != "0" ]; then
        cvmboot_panic "cannot determine sector size"
    fi

    # Determine the starting sector of the second partition
    local start=$(fdisk -l "${disk}" | tail -n1 | awk '{print $2}')
    if  [ "$?" != "0" ]; then
        cvmboot_panic "cannot determine starting sector"
    fi

    # Determine the number of sectors (from the second partition)
    local sectors=$(fdisk -l "${disk}" | tail -n1 | awk '{print $4}')
    if  [ "$?" != "0" ]; then
        cvmboot_panic "cannot determine number of sectors"
    fi

    # Delete second NTFS partition
    parted -s "${disk}" rm 2
    if  [ "$?" != "0" ]; then
        cvmboot_panic "${script}: failed to delete the second NTFS partition"
    fi
    sleep 1

    # Format first NTFS partition
    sleep 1
    mkfs.ntfs -f "${partition}"
    if  [ "$?" != "0" ]; then
        cvmboot_panic "${script}: failed to format NTFS partition: ${partition}"
    fi

    # Create loop device for the image file:
    local offset=$((${start} * ${sectsize}))
    local size=$((${sectors} * ${sectsize}))
    local loop=$(losetup -o "${offset}" --sizelimit "${size}" -b "${sectsize}" -f "${disk}" --show)
    if  [ "$?" != "0" ]; then
        cvmboot_panic "${script}: failed to create loop device: ${filename}"
    fi

    # Generate the ephemeral key for dm-crypt
    local keyfile="/tmp/keyfile"
    local keysize=512
    dd if=/dev/urandom of=${keyfile} bs=${keysize} count=1
    if [ ! -f "${keyfile}" ]; then
        cvmboot_panic "${script}: failed to create ${keyfile}"
    fi

    # open the crypto device:
    cryptsetup open --type plain "${loop}" "${rootfs_rw}" --batch-mode --cipher=aes-xts-plain64 --key-size=${keysize} --key-file=${keyfile} --perf-no_write_workqueue
    if  [ "$?" != "0" ]; then
        cvmboot_panic "${script}: cannot open dm-crypt device: ${rootfs_rw}"
    fi

    #echo "<<<<<<<< PRESS ANY KEY TO CONTINUE >>>>>>>>"
    #read
}

create_rootfs_rw

##==============================================================================
##
## create_rootfs()
##
## Create the dm-snapshot called /dev/mapper/${rootfs} from these devices:
##     /dev/mapper/${rootfs_ro}
##     /dev/mapper/${rootfs_rw}
##
## Resulting topology:
##
##                      [ /dev/mapper/${rootfs} ]
##                      [ dm-snapshot driver    ]
##                      /                       \
##      *[ /dev/mapper/${rootfs_ro} ]      *[ /dev/mapper/${rootfs_rw} ]
##       [ dm-verity driver         ]       [ dm-crypt driver          ]
##            /           \                 [ /dev/sda? raw disk       ]
##           /             \
## [ /dev/sda? (ext4) ] [ /dev/sda? (verity) ]
##
##==============================================================================
create_rootfs()
{
    local origin=/dev/mapper/${rootfs_ro}
    local cowdev=/dev/mapper/${rootfs_rw}
    local sectors=$(blockdev --getsz ${origin})
    dmsetup create ${rootfs} --table "0 ${sectors} snapshot ${origin} ${cowdev} N 8"
    if [ "$?" != "0" ]; then
        echo "${script}: cannot create snapshot: ${rootfs_ro}/${rootfs_rw}"
        lsblk
        read
        exit 0
    fi
}

##==============================================================================
##
## Unmount ${rootmnt}, create the snapshot, and mount the snapshot on ${rootmnt}
##
##==============================================================================

# Unmount the integrity-protected read-only root file system.
umount ${rootmnt}/lib/modules

# ATTN: the following umount fails on Azure Ubuntu image
umount ${rootmnt}
#if [ "$?" != "0" ]; then
#    cvmboot_panic "umount of ${rootmnt} failed"
#    exit 0
#fi

# Create the rootfs snapshot:
create_rootfs

# Mount the snapshot on ${rootmnt}
mount "/dev/mapper/${rootfs}" "${rootmnt}"
if [ "$?" != "0" ]; then
    echo "${script}: mount failed: /dev/mapper/${rootfs} => ${rootmnt}"
    read
    exit 0
fi

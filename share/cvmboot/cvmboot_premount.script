#!/bin/sh

PREREQ=''

prereqs() {
  echo "$PREREQ"
}

case $1 in
prereqs)
  prereqs
  exit 0
  ;;
esac

# dev-mapper name
# CAUTION: this must match the definition of ${rootfs_ro} in root_ro.script:
#rootfs_ro=rootfs_ro
rootfs_ro=rootfs_verity

##==============================================================================
##
## find_hash_device_from_data_device(data_device)
##
##==============================================================================
find_hash_device_from_data_device()
{
    local dev=$1

    # Check format of device name: "/dev/sdb[0-9]*"
    echo ${dev} | /usr/bin/grep -q "^/dev/sd[a-z][0-9]*"
    if [ "$?" != "0" ]; then
        echo "$0: invalid device name: ${dev}"
        return 1
    fi

    # If device does not exist.
    if [ ! -b "${dev}" ]; then
        echo "$0: not a block device: ${dev}"
        return 1
    fi

    # Get the disk name from the device name (e.g., /dev/sdb1 => /dev/sdb).
    local disk=$(echo ${dev} | sed 's/[0-9]$//g')
    if [ ! -b "${disk}" ]; then
        echo "$0: not a block device: ${disk}"
        return 1
    fi

    # Get the UUID of this data device.
    local tuuid=$(fdisk -l -o DEVICE,UUID "${disk}" 2> /dev/null | grep "${dev}" | awk '{print $2}')
    if [ "$?" != "0" ]; then
        echo "$0: unexpected fdisk failure: ${dev}"
        return 1
    fi
    if [ -z "${tuuid}" ]; then
        echo "$0: unexpected fdisk failure: ${dev}"
        return 1
    fi

    local uuid=$(echo ${tuuid} | tr '[A-Z]' '[a-z]')
    if [ "$?" != "0" ]; then
        echo "$0: tr failed"
        return 1
    fi

    # Get a list of partitions for this disk.
    local partitions=$(ls ${disk}[0-9]*)
    if [ "$?" != "0" ]; then
        echo "$0: unexpected failure: cannot glob disk device names: ${disk}"
        return 1
    fi

    # Iterate partitions looking for the hash-device for this data-device.
    for hdev in ${partitions}
    do
        # if this is a hash device.
        veritysetup dump ${hdev} > /dev/null 2> /dev/null
        if [ "$?" == "0" ]; then
            # Get the UUID of this hash device.
            local huuid=$(veritysetup dump ${hdev} | grep "UUID:" | awk '{print $2}')
            if [ "$?" != "0" ]; then
                echo "$0: failed to get the UUID"
                return 1
            fi
            if [ -z "${uuid}" ]; then
                echo "$0: failed to get the UUID"
                return 1
            fi

            if [ "${huuid}" == "${uuid}" ]; then
                echo "${hdev}"
                return 0
            fi
        fi
    done

    # not found!
    return 1
}

##==============================================================================
##
## get_roothash_from_hash_device(hash_device)
##
##==============================================================================
get_roothash_from_hash_device()
{
    local dev=$1
    local hbs=4096

    # Create a temporary file to hold the hash text.
    local text=$(mktemp)
    if [ -z "${text}" ]; then
        echo "$0: /bin/mktemp failed"
        return 1
    fi

    # Get the salt from the hash device.
    dd bs=1 skip=88 count=32 if=${dev} of=${text} 2> /dev/null
    if [ "$?" != "0" ]; then
        echo "$0: dd failed: if=${dev} of=${text}"
        return 1
    fi

    # Get the second block of the hash device.
    dd bs=1 skip=${hbs} count=${hbs} seek=32 if=${dev} of=${text} 2> /dev/null
    if [ "$?" != "0" ]; then
        echo "$0: failed to read ${dev} or write ${text}"
        return 1
    fi

    # Find the root hash: SHA-256(salt + block2)
    local roothash=$(sha256sum ${text} | awk '{print $1}')
    if [ "$?" != "0" ]; then
        echo "$0: sha256sum failed on ${text}"
        return 1
    fi

    # Echo the root hash
    echo ${roothash}

    # success!
    return 0
}

##==============================================================================
##
## get_roothash_from_efi_variable(data_device)
##
##==============================================================================
get_roothash_from_efi_variable()
{
    local tmpfile=$(mktemp)
    local uuid=08b5e462-25eb-42c0-a7d1-e9f78c3c7e09

    cat /sys/firmware/efi/efivars/roothash-${uuid} > ${tmpfile}
    if [ "$?" != "0" ]; then
        echo "$0: cannot find roothash EFI variable"
        return 1
    fi

    local tmpvar=$(tail -c +4 ${tmpfile})
    if [ -z "${tmpvar}" ]; then
        echo "$0: cannot parse roothash EFI variable"
        return 1
    fi

    local roothash=$(echo ${tmpvar} | tr '[A-Z]' '[a-z]')
    if [ -z "${roothash}" ]; then
        echo "$0: EFI variable is empty"
        return 1
    fi

    echo ${roothash}

    return 0
}

##==============================================================================
##
## verity_panic(message)
##
##==============================================================================
verity_panic()
{
    local message=$1
    echo "verity_panic: ${message}"
    read
    panic "$0: panic"
}

##==============================================================================
##
## check_noexist(symlink, num)
##
##==============================================================================
check_noexist()
{
    local symlink=$1
    local num=$2
    if [ -L "${symlink}" ]; then
        verity_panic "$0: symlink exists: ${symlink} ${num}"
    fi
}

##==============================================================================
##
## activate_thin_volume(disk)
##
##==============================================================================
activate_thin_volume()
{
    local disk=$1

    # get the thin data device from the disk
    local data_dev=$(fdisk -l -o DEVICE,Type-UUID ${disk} | grep -i 136CE4AF-AFED-4F96-84FF-0651088074EE | head -1 | cut -d' ' -f1)
    if [ "$?" != "0" ]; then
        verity_panic "failed to get thin data device"
    fi

    # get the thin meta device from the disk
    local meta_dev=$(fdisk -l -o DEVICE,Type-UUID ${disk} | grep -i ED71D74E-250A-4F9F-A29B-32246F9BB43A | head -1 | cut -d' ' -f1)
    if [ "$?" != "0" ]; then
        verity_panic "failed to get thin data device"
    fi

    local num_data_sectors=$(blockdev --getsz "${data_dev}")
    if [ "$?" != "0" ]; then
        verity_panic "failed to get number of data sectors"
    fi

    # Thin block size in units of 512-bytes
    local block_size=1024
    local low_water_mark=1024
    local num_thin_sectors=$(cat /etc/cvmboot-thin-sectors)

    #echo "block_size=${block_size}"
    #echo "low_water_mark=${low_water_mark}"
    #echo "data_dev=${data_dev}"
    #echo "meta_dev=${meta_dev}"
    #echo "num_data_sectors=${num_data_sectors}"
    #echo "num_thin_sectors=${num_thin_sectors}"
    #read

    # activate /dev/mapper/rootfs_thin_pool
    dmsetup create rootfs_thin_pool --table "0 ${num_data_sectors} thin-pool ${meta_dev} ${data_dev} ${block_size} ${low_water_mark} 1 read_only"
    if [ "$?" != "0" ]; then
        verity_panic "failed to activate thin-pool: ${meta_dev} ${data_dev}"
    fi

    # activate /dev/mapper/rootfs_thin volume
    dmsetup create rootfs_thin --table "0 ${num_thin_sectors} thin /dev/mapper/rootfs_thin_pool 0"
}

##==============================================================================
##
## find_hash_device(disk)
##
##==============================================================================
find_hash_device()
{
    local disk=$1

    fdisk -l -o DEVICE,Type-UUID ${disk} | grep -i 3416E185-0EFA-4BA5-BF43-BE206E7F9AF0 | head -1 | cut -d' ' -f1
}

##==============================================================================
##
## test_thin_data_device(disk)
##
##==============================================================================
test_thin_data_device()
{
    local disk=$1

    fdisk -l -o DEVICE,Type-UUID ${disk} | grep -q 136CE4AF-AFED-4F96-84FF-0651088074EE
}

##==============================================================================
##
## main:
##
##==============================================================================

##
## Extract the UUID from the ROOT variable
##
uuid=${ROOT#UUID=}
if [ -z "${uuid}" ]; then
    verity_panic "$0: unexpected ROOT variable format: ${ROOT}"
fi

##
## Check that the following symbolic link exists.
##
uuid_symlink=/dev/disk/by-uuid/${uuid}
if [ ! -L "${uuid_symlink}" ]; then
    verity_panic "$0: root file system symbolic link not found: ${uuid_symlink}"
fi

##
## Find the disk (e.g., /dev/sda)
##
rootdev=$(readlink -f ${uuid_symlink})
disk=$(echo ${rootdev} | sed 's/[0-9]$//g')

##
## Choose the data-device (thin-volume or raw partition)
##
test_thin_data_device ${disk}
if [ "$?" == "0" ]; then
    activate_thin_volume ${disk}
    datadev=/dev/mapper/rootfs_thin
else
    datadev=$(fdisk -l -o DEVICE,Type-UUID ${disk} | grep -i 0FC63DAF-8483-4772-8E79-3D69D8477DE4 | head -1 | cut -d' ' -f1)
    if [ "$?" != "0" ]; then
        verity_panic "failed to get the rootfs partition"
    fi
fi

##
## Find the hash-device
##
hashdev=$(find_hash_device ${disk})
if [ "$?" != "0" ]; then
    verity_panic "failed to find hash device"
fi

##
## Recompute the roothash from the hash device
##
roothash=$(get_roothash_from_hash_device ${hashdev})
if [ "$?" != "0" ]; then
    verity_panic "$0: failed to recover the roothash from ${hashdev}"
fi

##
## Mount the "efivar" file system (if not already mounted):
##
mount -t efivarfs none /sys/firmware/efi/efivars
if [ "$?" != "0" ]; then
    echo "error: failed to mount efivars"
    # ATTN: it might be mounted already!
fi

##
## Get the roothash from the EFI variable:
##
efivar_roothash=$(get_roothash_from_efi_variable)
if [ "$?" != "0" ]; then
    verity_panic "$0: failed to get roothash from EFI variable"
fi

##
## Fail if roothash does not match roothash from EFI variable:
##
if [ "${roothash}" != "${efivar_roothash}" ]; then
    verity_panic "bad roothash: ${roothash}/${efivar_roothash}"
fi

##==============================================================================
##
## Open the verity device onto /dev/mapper/${rootfs_ro}. Note: this command
## recreates ${uuid_symlink} as an unexpected side effect.
##
## Resulting topology:
##
##                 [ /dev/mapper/${rootfs_ro} ] <- EXT4 blocks
##                 [ dm-verity driver         ]
##                   /                       \
##       [ /dev/sda? (ext4) ]         [ /dev/sda? (verity) ]
##
##==============================================================================

veritysetup open "${datadev}" "${rootfs_ro}" "${hashdev}" "${efivar_roothash}"
if [ "$?" != "0" ]; then
    verity_panic "$0: veritysetup open: ${datadev} ${hashdev} ${efivar_roothash}"
fi
rm -rf "${uuid_symlink}"

##
## Replace the UUID device path symbolic link with the top of verity stack
##
ln -s "/dev/mapper/${rootfs_ro}" "${uuid_symlink}"
if [ "$?" != "0" ]; then
    verity_panic "$0: cannot create symlink: ${uuid_symlink}"
fi
